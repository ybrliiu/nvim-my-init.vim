snippet strict
  use v5.28;
  use warnings;
  use utf8;
  ${0}

snippet dumper
  use Data::Dumper;
  warn Dumper ${0};

snippet ddp
  use DDP +{ deparse => 1, use_prototypes => 0 };

snippet sig_die_confess
  $SIG{__DIE__} = \&Carp::confess;

snippet sig_warn_cluck
  $SIG{__WARN__} = \&Carp::cluck;

snippet pkg
  package `expand('%:p:s?.*lib/??:r:gs?/?::?')`;
  use strict;
  use warnings;
  use utf8;

  ${0}

  1;

snippet class
  package `expand('%:p:s?.*lib/??:r:gs?/?::?')` {

    use v5.28;
    use Moo;
    use utf8;
    ${0}

  }

  1;

snippet compro_tiny
  use v5.18;
  use warnings;
  sub read_line { chomp(my $s = <>); $s }
  sub splited_read_line { split / /, read_line }
  ${0}

snippet compro
  use v5.18;
  use warnings;
  use List::Util;
  use Data::Dumper;
  sub read_line { chomp(my $s = <>); $s }
  sub splited_read_line { split / /, read_line }
  sub unique { my %u; $u{$_} = $_ for @_; values %u; }
  ${0}

snippet compro_hard
  use v5.18;
  use warnings;
  use List::Util;
  use Data::Dumper;
  sub read_line { chomp(my $s = <>); $s }
  sub splited_read_line { split / /, read_line }
  sub unique { my %u; $u{$_} = $_ for @_; values %u; }
  sub accessor {
    my $n = shift; my $p = caller; no strict 'refs';
    *{"${p}::${n}"} = sub { use strict 'refs'; my $s = shift; @_ ? $s->{$n} = shift : $s->{$n} }
  }

  ${0}

