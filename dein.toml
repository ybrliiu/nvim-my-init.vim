# plguins list(for dein.vim)

# required
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'

# 補完プラグイン
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
  let g:deoplete#enable_camel_case = 1
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  let g:deoplete#file#enable_buffer_path = 1
  " For perlomni.vim setting.
  let g:deoplete#omni_patterns = {}
  let g:deoplete#omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
  let g:deoplete#delimiters = ['/', '::']
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1
  " Tell Neosnippet about the other snippets
  let g:neosnippet#snippets_directory='~/.config/nvim/snippets'
'''

# シンタクスチェックと警告チェックしてくれるやつ
# あとでちゃんと設定を調べる
[[plugins]]
repo = 'w0rp/ale'
on_i = 1
on_ft = ['perl']
hook_source = '''
let g:ale_sign_column_always = 1
let g:ale_linters = {
\   'perl': ['perl', 'perlcritic'],
\ }
" ファイル保存時のみ有効にする
let g:ale_lint_on_save = 1
" テキスト変更時は有効にしない
let g:ale_lint_on_text_changed = 0
" Perl
if filereadable('./cpanfile')
  let g:ale_perl_perl_executable = 'carmel'
else
  let g:ale_perl_perl_executable = 'perl'
endif
if filereadable('./cpanfile')
  let g:ale_perl_perl_options = 'exec -- perl -c -Ilib'
else
  let g:ale_perl_perl_options = '-c -Ilib'
endif
'''

[[plugins]]
repo = 'vim-perl/vim-perl'
on_ft = ['perl']
# よく使うモジュールの関数を拡張文法として見たいのでファイル移動して
# syntaxディレクトリに移動させる
hook_post_update = '''
  let cp_to = g:liiu#vim_dir . '/after/syntax/perl/'
  execute '! mkdir -p ' . cp_to
  let repo_dir = g:liiu#dein_dir . '/repos/github.com/vim-perl/vim-perl/'
  execute '! cp ' . repo_dir . 'contrib/moose.vim ' . cp_to
  execute '! cp ' . repo_dir . 'contrib/try-tiny.vim ' . cp_to
  execute '! cp ' . repo_dir . 'contrib/test-more.vim ' . cp_to
  execute '! cp ' . repo_dir . 'contrib/carp.vim ' . cp_to
'''
hook_add = '''
  " vim-perl で signatures の許可 sub sum($x, $y) {} みたいな書き方がokになる
  let perl_sub_signatures = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
  let g:asyncomplete_auto_popup = 1
  let g:asyncomplete_auto_completeopt = 0
  let g:asyncomplete_popup_delay = 200
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  if empty(globpath(&rtp, 'autoload/lsp.vim'))
    finish
  endif
  
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
  endfunction
  
  augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
  command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_text_edit_enabled = 1
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'mattn/vim-lsp-icons'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

# 英単語補完
[[plugins]]
on_i = 1
repo = 'ujihisa/neco-look'

# パッケージ名の自動展開
[[plugins]]
on_i = 1
repo = 'SirVer/ultisnips'

[[plugins]]
# なぜか明示的に読み込むタイミング指定しないと一向にこのプラグインがロードされないようだ・・・
on_event = ['VimEnter'] 
repo = 'tpope/vim-fugitive'
hook_post_source = 'source ~/.config/nvim/statusline.vim'

## color schemes

[[plugins]]
repo = 'nanotech/jellybeans.vim'
# hook_add = '''
#  augroup liiu_set_color_schema
#    autocmd!
#    autocmd VimEnter * nested colorscheme jellybeans
#    autocmd VimEnter * nested set background=dark
#  augroup END
# '''

[[plugins]]
repo = 'tomasr/molokai'
# hook_add = '''
#  augroup liiu_set_color_schema
#    autocmd!
#    autocmd VimEnter * nested colorscheme molokai
#    autocmd VimEnter * nested set background=dark
#  augroup END
# '''

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'
hook_add = '''
 augroup liiu_set_color_schema
   autocmd!
   autocmd VimEnter * nested colorscheme PaperColor
   autocmd VimEnter * nested set background=dark
 augroup END
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
# hook_add = '''
# 
#   " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
#   " 但し Colorscheme イベントの発生が抑制されないよう nested を付ける。
#   augroup liiu_set_color_schema
#     autocmd!
#     autocmd VimEnter * nested colorscheme hybrid
#     autocmd VimEnter * nested set background=dark
#   augroup END
# '''

